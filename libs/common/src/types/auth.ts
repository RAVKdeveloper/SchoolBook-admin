// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'auth'

export interface User {
  id: number
  name: string
  middlename: string
  surname: string
  createAt: Date
  updateAt: Date
  email: string
  avatar: string
  isActivated: boolean
  blocked: boolean
  blockedDescription: string
}

export interface MeDto {
  userId: number
}

export interface CreateUserDto {
  email: string
  name: string
  middlename: string
  surname: string
  password: string
}

export interface UpdatePassRes {
  message: string
}

export interface LoginUserDto {
  email: string
  password: string
}

export interface VerifyDto {
  userId: number
  code: number
}

export interface ForgotPasswordDto {
  email: string
}

export interface UpdatePassDto {
  id: number
  password: string
  code: number
}

export interface VerifyResponse {
  message: string
  token: string
}

export interface LogOutResponse {
  message: string
}

export const AUTH_PACKAGE_NAME = 'auth'

export interface AuthServiceClient {
  registration(request: CreateUserDto): Observable<User>

  loginUser(request: LoginUserDto): Observable<User>

  me(request: MeDto): Observable<User>

  verify(request: VerifyDto): Observable<VerifyResponse>

  forgotPass(request: ForgotPasswordDto): Observable<User>

  updatePass(request: UpdatePassDto): Observable<UpdatePassRes>
}

export interface AuthServiceController {
  registration(request: CreateUserDto): Promise<User> | Observable<User> | User

  loginUser(request: LoginUserDto): Promise<User> | Observable<User> | User

  me(request: MeDto): Promise<User> | Observable<User> | User

  verify(request: VerifyDto): Promise<VerifyResponse> | Observable<VerifyResponse> | VerifyResponse

  forgotPass(request: ForgotPasswordDto): Promise<User> | Observable<User> | User

  updatePass(
    request: UpdatePassDto,
  ): Promise<UpdatePassRes> | Observable<UpdatePassRes> | UpdatePassRes
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'registration',
      'loginUser',
      'me',
      'verify',
      'forgotPass',
      'updatePass',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const AUTH_SERVICE_NAME = 'AuthService'
