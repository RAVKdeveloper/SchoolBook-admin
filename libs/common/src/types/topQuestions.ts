// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/topQuestions.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { QuestionEntityDto } from './entities'

export const protobufPackageTopQuestions = 'topQuestions'

export interface CreateQuestionsDto {
  creatorId: number
  title: string
  comment: string
  role: string
  schoolId: number
}

export interface UpdateQuestionDto {
  updaterId: number
  questionId: number
  title?: string | undefined
  comment?: string | undefined
  role?: string | undefined
}

export interface GetPopularQuestionsDto {
  schoolId: number
  role: string
  userRole: string
}

export interface ReturnPopularQuestionsDto {
  count: number
  data: QuestionEntityDto[]
}

export interface GetQuestionByIdDto {
  id: number
}

export interface ReturnOneQuestionDto {
  message: string
  question: QuestionEntityDto | undefined
}

export const TOP_QUESTIONS_PACKAGE_NAME = 'topQuestions'

export interface TopQuestionsServiceClient {
  createQuestion(request: CreateQuestionsDto): Observable<ReturnOneQuestionDto>

  getPopularQuestions(request: GetPopularQuestionsDto): Observable<ReturnPopularQuestionsDto>

  getQuestionById(request: GetQuestionByIdDto): Observable<ReturnOneQuestionDto>
}

export interface TopQuestionsServiceController {
  createQuestion(
    request: CreateQuestionsDto,
  ): Promise<ReturnOneQuestionDto> | Observable<ReturnOneQuestionDto> | ReturnOneQuestionDto

  getPopularQuestions(
    request: GetPopularQuestionsDto,
  ):
    | Promise<ReturnPopularQuestionsDto>
    | Observable<ReturnPopularQuestionsDto>
    | ReturnPopularQuestionsDto

  getQuestionById(
    request: GetQuestionByIdDto,
  ): Promise<ReturnOneQuestionDto> | Observable<ReturnOneQuestionDto> | ReturnOneQuestionDto
}

export function TopQuestionsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createQuestion', 'getPopularQuestions', 'getQuestionById']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('TopQuestionsService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('TopQuestionsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      )
    }
  }
}

export const TOP_QUESTIONS_SERVICE_NAME = 'TopQuestionsService'
