// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/school.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { SchoolEntityDto } from './entities'

export const protobufPackageSchool = 'school'

export interface CreateSchoolDto {
  name: string
  location: string
  licenseNumber: string
  pointsSystem: string
  region: string
  userId: number
  ip: string
}

export interface ReturnSchoolCreateOk {
  message: string
  schoolId: number
}

export interface ReturnGetOneSchool {
  message: string
  school: SchoolEntityDto | undefined
}

export interface GetOneSchoolDto {
  schoolId: number
  ownerId?: number | undefined
  moderatorId?: number | undefined
  teacherId?: number | undefined
}

export interface UpdateSchoolDto {
  name?: string | undefined
  description?: string | undefined
  licenseNumber?: string | undefined
  location?: string | undefined
  ownerId: number
}

export const SCHOOL_PACKAGE_NAME = 'school'

export interface SchoolServiceClient {
  createSchool(request: CreateSchoolDto): Observable<ReturnSchoolCreateOk>

  getSchoolById(request: GetOneSchoolDto): Observable<ReturnGetOneSchool>

  updateSchoolMetedata(request: UpdateSchoolDto): Observable<ReturnGetOneSchool>
}

export interface SchoolServiceController {
  createSchool(
    request: CreateSchoolDto,
  ): Promise<ReturnSchoolCreateOk> | Observable<ReturnSchoolCreateOk> | ReturnSchoolCreateOk

  getSchoolById(
    request: GetOneSchoolDto,
  ): Promise<ReturnGetOneSchool> | Observable<ReturnGetOneSchool> | ReturnGetOneSchool

  updateSchoolMetedata(
    request: UpdateSchoolDto,
  ): Promise<ReturnGetOneSchool> | Observable<ReturnGetOneSchool> | ReturnGetOneSchool
}

export function SchoolServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createSchool', 'getSchoolById', 'updateSchoolMetedata']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('SchoolService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('SchoolService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const SCHOOL_SERVICE_NAME = 'SchoolService'
