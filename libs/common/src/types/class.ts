// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/class.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { ClassEntityDto } from './entities'

export const protobufPackageClass = 'class'

export interface CreateClassDto {
  name: number
  parallel: string
  schoolId: number
  chiefs: number[]
}

export interface GetAllClessesDto {
  schoolId: number
  searchValue?: string
  sortByRatingPoints: boolean
  page: number
  limit?: number | undefined
}

export interface GetOneClassByIdDto {
  id: number
}

export interface ResponseGetAllClassesDto {
  count: number
  data: ClassEntityDto[]
}

export interface ResponseGetClassById {
  message: string
  class: ClassEntityDto | undefined
}

export interface UpdateClassDto {
  name?: number | undefined
  parallel?: string | undefined
  students: number[]
  lessons: number[]
  chiefs: number[]
  id: number
  schoolId: number
}

export interface DeleteClassDto {
  id: number
  schoolId: number
}

export const CLASS_PACKAGE_NAME = 'class'

export interface ClassServiceClient {
  createClass(request: CreateClassDto): Observable<ResponseGetClassById>

  getAllClasses(request: GetAllClessesDto): Observable<ResponseGetAllClassesDto>

  getClassById(request: GetOneClassByIdDto): Observable<ResponseGetClassById>

  updateClass(request: UpdateClassDto): Observable<ResponseGetClassById>

  deleteClass(request: DeleteClassDto): Observable<ResponseGetClassById>
}

export interface ClassServiceController {
  createClass(
    request: CreateClassDto,
  ): Promise<ResponseGetClassById> | Observable<ResponseGetClassById> | ResponseGetClassById

  getAllClasses(
    request: GetAllClessesDto,
  ):
    | Promise<ResponseGetAllClassesDto>
    | Observable<ResponseGetAllClassesDto>
    | ResponseGetAllClassesDto

  getClassById(
    request: GetOneClassByIdDto,
  ): Promise<ResponseGetClassById> | Observable<ResponseGetClassById> | ResponseGetClassById

  updateClass(
    request: UpdateClassDto,
  ): Promise<ResponseGetClassById> | Observable<ResponseGetClassById> | ResponseGetClassById

  deleteClass(
    request: DeleteClassDto,
  ): Promise<ResponseGetClassById> | Observable<ResponseGetClassById> | ResponseGetClassById
}

export function ClassServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createClass',
      'getAllClasses',
      'getClassById',
      'updateClass',
      'deleteClass',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('ClassService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('ClassService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const CLASS_SERVICE_NAME = 'ClassService'
