// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/invites.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { AccountDto } from './admin'

export const protobufPackageInvites = 'invites'

export interface AcceptInviteModeratorDto {
  isAccept: boolean
  moderatorId: number
}

export interface GetAllInvitesQueryDto {
  role?: string | undefined
  page: number
  limit?: number | undefined
  userId: number
}

export interface InvitingAllAccountDto {
  accounts: AccountDto[]
  count: number
}

export interface ReturnOkAcceptInvite {
  message: string
}

export interface CreateTeacherInviteDto {
  userId: number
  schoolId: number
  lessonId?: number | undefined
  chiefClassId?: number | undefined
  maxCount?: number | undefined
}

export interface CreateStudentInviteDto {
  userId: number
  schoolId: number
  classId: number
  maxCount?: number | undefined
}

export interface GetAccessTeacherInviteDto {
  userId: number
  key: string
}

export interface GetAccessStudentInviteDto {
  userId: number
  key: string
}

export const INVITES_PACKAGE_NAME = 'invites'

export interface InvitesServiceClient {
  acceptModeratorInvite(request: AcceptInviteModeratorDto): Observable<ReturnOkAcceptInvite>

  getAllInvites(request: GetAllInvitesQueryDto): Observable<InvitingAllAccountDto>

  createTeacherInvite(request: CreateTeacherInviteDto): Observable<ReturnOkAcceptInvite>

  createStudentInvite(request: CreateStudentInviteDto): Observable<ReturnOkAcceptInvite>

  accessStudentInvite(request: GetAccessStudentInviteDto): Observable<ReturnOkAcceptInvite>

  accessTeacherInvite(request: GetAccessTeacherInviteDto): Observable<ReturnOkAcceptInvite>
}

export interface InvitesServiceController {
  acceptModeratorInvite(
    request: AcceptInviteModeratorDto,
  ): Promise<ReturnOkAcceptInvite> | Observable<ReturnOkAcceptInvite> | ReturnOkAcceptInvite

  getAllInvites(
    request: GetAllInvitesQueryDto,
  ): Promise<InvitingAllAccountDto> | Observable<InvitingAllAccountDto> | InvitingAllAccountDto

  createTeacherInvite(
    request: CreateTeacherInviteDto,
  ): Promise<ReturnOkAcceptInvite> | Observable<ReturnOkAcceptInvite> | ReturnOkAcceptInvite

  createStudentInvite(
    request: CreateStudentInviteDto,
  ): Promise<ReturnOkAcceptInvite> | Observable<ReturnOkAcceptInvite> | ReturnOkAcceptInvite

  accessStudentInvite(
    request: GetAccessStudentInviteDto,
  ): Promise<ReturnOkAcceptInvite> | Observable<ReturnOkAcceptInvite> | ReturnOkAcceptInvite

  accessTeacherInvite(
    request: GetAccessTeacherInviteDto,
  ): Promise<ReturnOkAcceptInvite> | Observable<ReturnOkAcceptInvite> | ReturnOkAcceptInvite
}

export function InvitesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'acceptModeratorInvite',
      'getAllInvites',
      'createTeacherInvite',
      'createStudentInvite',
      'accessStudentInvite',
      'accessTeacherInvite',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('InvitesService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('InvitesService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const INVITES_SERVICE_NAME = 'InvitesService'
