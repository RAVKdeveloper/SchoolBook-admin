// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/lesson.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { LessonEntityDto } from './entities'

export const protobufPackageLesson = 'lesson'

export interface CreateLessonDto {
  classId: number
  teacherId: number[]
  name: string
  schoolId: number
}

export interface GetAllLessonsDto {
  classId?: number | undefined
  page?: string | undefined
  limit?: string | undefined
  lessonName?: string | undefined
  teacherId?: string | undefined
  schoolId: string
  isRequired?: boolean | undefined
  onlyMy?: number | undefined
}

export interface ReturnOneLessonDto {
  message: string
  lesson: LessonEntityDto | undefined
}

export interface ReturnAllLessonsDto {
  count: number
  data: LessonEntityDto[]
}

export interface GetOneLessonByIdDto {
  lessonId: number
  schoolId: number
}

export interface UpdateLessonDto {
  name?: string | undefined
  classId?: number | undefined
  teacherId: number[]
  isAddTeachers: boolean
  lessonId: number
}

export interface DeleteLessonByIdDto {
  schoolId: number
  id: number
}

export const LESSON_PACKAGE_NAME = 'lesson'

export interface LessonsServiceClient {
  createLesson(request: CreateLessonDto): Observable<ReturnOneLessonDto>

  getAllLessons(request: GetAllLessonsDto): Observable<ReturnAllLessonsDto>

  getLessonById(request: GetOneLessonByIdDto): Observable<ReturnOneLessonDto>

  updateLesson(request: UpdateLessonDto): Observable<ReturnOneLessonDto>

  deleteLesson(request: DeleteLessonByIdDto): Observable<ReturnOneLessonDto>
}

export interface LessonsServiceController {
  createLesson(
    request: CreateLessonDto,
  ): Promise<ReturnOneLessonDto> | Observable<ReturnOneLessonDto> | ReturnOneLessonDto

  getAllLessons(
    request: GetAllLessonsDto,
  ): Promise<ReturnAllLessonsDto> | Observable<ReturnAllLessonsDto> | ReturnAllLessonsDto

  getLessonById(
    request: GetOneLessonByIdDto,
  ): Promise<ReturnOneLessonDto> | Observable<ReturnOneLessonDto> | ReturnOneLessonDto

  updateLesson(
    request: UpdateLessonDto,
  ): Promise<ReturnOneLessonDto> | Observable<ReturnOneLessonDto> | ReturnOneLessonDto

  deleteLesson(
    request: DeleteLessonByIdDto,
  ): Promise<ReturnOneLessonDto> | Observable<ReturnOneLessonDto> | ReturnOneLessonDto
}

export function LessonsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createLesson',
      'getAllLessons',
      'getLessonById',
      'updateLesson',
      'deleteLesson',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('LessonsService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('LessonsService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const LESSONS_SERVICE_NAME = 'LessonsService'
