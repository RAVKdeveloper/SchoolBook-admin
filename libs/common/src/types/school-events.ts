// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/school-events.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { SchoolEventEntityDto } from './entities'

export const protobufPackageSchoolEvents = 'schoolEvents'

export interface CreateSchoolEventDto {
  title: string
  description: string
  tags: string[]
  schoolId: number
  activeTeachers: ActiveTeachersArrayDto[]
  activeStudents: ActiveStudentsArrayDto[]
  activeClasses: ActiveClassesArrayDto[]
  creatorId: number
  isPrivate: boolean
  plannedDate: string
}

export interface ActiveTeachersArrayDto {
  teacherId?: number | undefined
}

export interface ActiveStudentsArrayDto {
  studentId?: number | undefined
}

export interface ActiveClassesArrayDto {
  classId?: number | undefined
}

export interface CreateOkEventDto {
  message: string
  event: SchoolEventEntityDto | undefined
}

export interface GetAllSchoolEventsDto {
  startDate?: string | undefined
  endDate?: string | undefined
  tags: SchoolEventTagsDto[]
  classes: ActiveClassesArrayDto[]
  isPopular?: boolean | undefined
  onlyMy?: number | undefined
  page: number
  limit?: number | undefined
  schoolId: number
}

export interface SchoolEventTagsDto {
  tag?: string | undefined
}

export interface ReturnAllSchoolEventsDto {
  count: number
  data: SchoolEventEntityDto[]
}

export interface GetSchoolEventByIdDto {
  schoolEventId: number
}

export interface UpdateSchoolEventDto {
  title?: string | undefined
  description?: string | undefined
  image?: string | undefined
  tags: string[]
  activeTeachers: ActiveTeachersArrayDto[]
  activeStudents: ActiveStudentsArrayDto[]
  activeClasses: ActiveClassesArrayDto[]
  isPrivate?: boolean | undefined
  creatorId: number
  eventId: number
}

export interface DeleteSchoolEventDto {
  id: number
  creatorId: number
}

export const SCHOOL_EVENTS_PACKAGE_NAME = 'schoolEvents'

export interface SchoolEventsServiceClient {
  createSchoolEvent(request: CreateSchoolEventDto): Observable<CreateOkEventDto>

  getAllSchoolEvents(request: GetAllSchoolEventsDto): Observable<ReturnAllSchoolEventsDto>

  getSchoolEventById(request: GetSchoolEventByIdDto): Observable<CreateOkEventDto>

  updateSchoolEvent(request: UpdateSchoolEventDto): Observable<CreateOkEventDto>

  deleteSchoolEvent(request: DeleteSchoolEventDto): Observable<CreateOkEventDto>
}

export interface SchoolEventsServiceController {
  createSchoolEvent(
    request: CreateSchoolEventDto,
  ): Promise<CreateOkEventDto> | Observable<CreateOkEventDto> | CreateOkEventDto

  getAllSchoolEvents(
    request: GetAllSchoolEventsDto,
  ):
    | Promise<ReturnAllSchoolEventsDto>
    | Observable<ReturnAllSchoolEventsDto>
    | ReturnAllSchoolEventsDto

  getSchoolEventById(
    request: GetSchoolEventByIdDto,
  ): Promise<CreateOkEventDto> | Observable<CreateOkEventDto> | CreateOkEventDto

  updateSchoolEvent(
    request: UpdateSchoolEventDto,
  ): Promise<CreateOkEventDto> | Observable<CreateOkEventDto> | CreateOkEventDto

  deleteSchoolEvent(
    request: DeleteSchoolEventDto,
  ): Promise<CreateOkEventDto> | Observable<CreateOkEventDto> | CreateOkEventDto
}

export function SchoolEventsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createSchoolEvent',
      'getAllSchoolEvents',
      'getSchoolEventById',
      'updateSchoolEvent',
      'deleteSchoolEvent',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('SchoolEventsService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('SchoolEventsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      )
    }
  }
}

export const SCHOOL_EVENTS_SERVICE_NAME = 'SchoolEventsService'
