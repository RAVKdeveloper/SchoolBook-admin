// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: proto/mail.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackageMail = 'mail';

export interface CreateOneAuthCode {
  to: string;
  code: string;
}

export interface CreateLoginMail {
  to: string;
}

export interface MailSuccessfulCreateClassDto {
  to: string;
  class: string;
  school: string;
  createrUsername: string;
}

export interface OkSendMailRes {
  message: string;
}

export const MAIL_PACKAGE_NAME = 'mail';

export interface MailServiceClient {
  sendOtpCode(request: CreateOneAuthCode): Observable<OkSendMailRes>;

  sendLoginMail(request: CreateLoginMail): Observable<OkSendMailRes>;

  sendCreateClassMail(
    request: MailSuccessfulCreateClassDto,
  ): Observable<OkSendMailRes>;
}

export interface MailServiceController {
  sendOtpCode(
    request: CreateOneAuthCode,
  ): Promise<OkSendMailRes> | Observable<OkSendMailRes> | OkSendMailRes;

  sendLoginMail(
    request: CreateLoginMail,
  ): Promise<OkSendMailRes> | Observable<OkSendMailRes> | OkSendMailRes;

  sendCreateClassMail(
    request: MailSuccessfulCreateClassDto,
  ): Promise<OkSendMailRes> | Observable<OkSendMailRes> | OkSendMailRes;
}

export function MailServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'sendOtpCode',
      'sendLoginMail',
      'sendCreateClassMail',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('MailService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('MailService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const MAIL_SERVICE_NAME = 'MailService';
